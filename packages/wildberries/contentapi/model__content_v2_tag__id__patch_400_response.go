/*
Описание API Контента

 <dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code> <br>  <br>

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contentapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ContentV2TagIdPatch400Response - struct for ContentV2TagIdPatch400Response
type ContentV2TagIdPatch400Response struct {
	ResponseBodyContentError400 *ResponseBodyContentError400
	ResponseContentError4       *ResponseContentError4
}

// ResponseBodyContentError400AsContentV2TagIdPatch400Response is a convenience function that returns ResponseBodyContentError400 wrapped in ContentV2TagIdPatch400Response
func ResponseBodyContentError400AsContentV2TagIdPatch400Response(v *ResponseBodyContentError400) ContentV2TagIdPatch400Response {
	return ContentV2TagIdPatch400Response{
		ResponseBodyContentError400: v,
	}
}

// ResponseContentError4AsContentV2TagIdPatch400Response is a convenience function that returns ResponseContentError4 wrapped in ContentV2TagIdPatch400Response
func ResponseContentError4AsContentV2TagIdPatch400Response(v *ResponseContentError4) ContentV2TagIdPatch400Response {
	return ContentV2TagIdPatch400Response{
		ResponseContentError4: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentV2TagIdPatch400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ResponseBodyContentError400
	err = newStrictDecoder(data).Decode(&dst.ResponseBodyContentError400)
	if err == nil {
		jsonResponseBodyContentError400, _ := json.Marshal(dst.ResponseBodyContentError400)
		if string(jsonResponseBodyContentError400) == "{}" { // empty struct
			dst.ResponseBodyContentError400 = nil
		} else {
			if err = validator.Validate(dst.ResponseBodyContentError400); err != nil {
				dst.ResponseBodyContentError400 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseBodyContentError400 = nil
	}

	// try to unmarshal data into ResponseContentError4
	err = newStrictDecoder(data).Decode(&dst.ResponseContentError4)
	if err == nil {
		jsonResponseContentError4, _ := json.Marshal(dst.ResponseContentError4)
		if string(jsonResponseContentError4) == "{}" { // empty struct
			dst.ResponseContentError4 = nil
		} else {
			if err = validator.Validate(dst.ResponseContentError4); err != nil {
				dst.ResponseContentError4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseContentError4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ResponseBodyContentError400 = nil
		dst.ResponseContentError4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentV2TagIdPatch400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentV2TagIdPatch400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentV2TagIdPatch400Response) MarshalJSON() ([]byte, error) {
	if src.ResponseBodyContentError400 != nil {
		return json.Marshal(&src.ResponseBodyContentError400)
	}

	if src.ResponseContentError4 != nil {
		return json.Marshal(&src.ResponseContentError4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentV2TagIdPatch400Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ResponseBodyContentError400 != nil {
		return obj.ResponseBodyContentError400
	}

	if obj.ResponseContentError4 != nil {
		return obj.ResponseContentError4
	}

	// all schemas are nil
	return nil
}

type NullableContentV2TagIdPatch400Response struct {
	value *ContentV2TagIdPatch400Response
	isSet bool
}

func (v NullableContentV2TagIdPatch400Response) Get() *ContentV2TagIdPatch400Response {
	return v.value
}

func (v *NullableContentV2TagIdPatch400Response) Set(val *ContentV2TagIdPatch400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableContentV2TagIdPatch400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableContentV2TagIdPatch400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentV2TagIdPatch400Response(val *ContentV2TagIdPatch400Response) *NullableContentV2TagIdPatch400Response {
	return &NullableContentV2TagIdPatch400Response{value: val, isSet: true}
}

func (v NullableContentV2TagIdPatch400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentV2TagIdPatch400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
