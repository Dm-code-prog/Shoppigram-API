/*
Описание API Контента

 <dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code> <br>  <br>

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contentapi

import (
	"encoding/json"
)

// checks if the ResponseIncorrectDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseIncorrectDate{}

// ResponseIncorrectDate struct for ResponseIncorrectDate
type ResponseIncorrectDate struct {
	Error *string `json:"error,omitempty"`
}

// NewResponseIncorrectDate instantiates a new ResponseIncorrectDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseIncorrectDate() *ResponseIncorrectDate {
	this := ResponseIncorrectDate{}
	return &this
}

// NewResponseIncorrectDateWithDefaults instantiates a new ResponseIncorrectDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseIncorrectDateWithDefaults() *ResponseIncorrectDate {
	this := ResponseIncorrectDate{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ResponseIncorrectDate) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseIncorrectDate) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ResponseIncorrectDate) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ResponseIncorrectDate) SetError(v string) {
	o.Error = &v
}

func (o ResponseIncorrectDate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseIncorrectDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableResponseIncorrectDate struct {
	value *ResponseIncorrectDate
	isSet bool
}

func (v NullableResponseIncorrectDate) Get() *ResponseIncorrectDate {
	return v.value
}

func (v *NullableResponseIncorrectDate) Set(val *ResponseIncorrectDate) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseIncorrectDate) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseIncorrectDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseIncorrectDate(val *ResponseIncorrectDate) *NullableResponseIncorrectDate {
	return &NullableResponseIncorrectDate{value: val, isSet: true}
}

func (v NullableResponseIncorrectDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseIncorrectDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
