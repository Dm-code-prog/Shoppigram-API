/*
Описание API Контента

 <dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code> <br>  <br>

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contentapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ContentV2CardsMoveNmPost400Response - struct for ContentV2CardsMoveNmPost400Response
type ContentV2CardsMoveNmPost400Response struct {
	ResponseCardCreate    *ResponseCardCreate
	ResponseContentError1 *ResponseContentError1
	ResponseIncorrectDate *ResponseIncorrectDate
}

// ResponseCardCreateAsContentV2CardsMoveNmPost400Response is a convenience function that returns ResponseCardCreate wrapped in ContentV2CardsMoveNmPost400Response
func ResponseCardCreateAsContentV2CardsMoveNmPost400Response(v *ResponseCardCreate) ContentV2CardsMoveNmPost400Response {
	return ContentV2CardsMoveNmPost400Response{
		ResponseCardCreate: v,
	}
}

// ResponseContentError1AsContentV2CardsMoveNmPost400Response is a convenience function that returns ResponseContentError1 wrapped in ContentV2CardsMoveNmPost400Response
func ResponseContentError1AsContentV2CardsMoveNmPost400Response(v *ResponseContentError1) ContentV2CardsMoveNmPost400Response {
	return ContentV2CardsMoveNmPost400Response{
		ResponseContentError1: v,
	}
}

// ResponseIncorrectDateAsContentV2CardsMoveNmPost400Response is a convenience function that returns ResponseIncorrectDate wrapped in ContentV2CardsMoveNmPost400Response
func ResponseIncorrectDateAsContentV2CardsMoveNmPost400Response(v *ResponseIncorrectDate) ContentV2CardsMoveNmPost400Response {
	return ContentV2CardsMoveNmPost400Response{
		ResponseIncorrectDate: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentV2CardsMoveNmPost400Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ResponseCardCreate
	err = newStrictDecoder(data).Decode(&dst.ResponseCardCreate)
	if err == nil {
		jsonResponseCardCreate, _ := json.Marshal(dst.ResponseCardCreate)
		if string(jsonResponseCardCreate) == "{}" { // empty struct
			dst.ResponseCardCreate = nil
		} else {
			if err = validator.Validate(dst.ResponseCardCreate); err != nil {
				dst.ResponseCardCreate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseCardCreate = nil
	}

	// try to unmarshal data into ResponseContentError1
	err = newStrictDecoder(data).Decode(&dst.ResponseContentError1)
	if err == nil {
		jsonResponseContentError1, _ := json.Marshal(dst.ResponseContentError1)
		if string(jsonResponseContentError1) == "{}" { // empty struct
			dst.ResponseContentError1 = nil
		} else {
			if err = validator.Validate(dst.ResponseContentError1); err != nil {
				dst.ResponseContentError1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseContentError1 = nil
	}

	// try to unmarshal data into ResponseIncorrectDate
	err = newStrictDecoder(data).Decode(&dst.ResponseIncorrectDate)
	if err == nil {
		jsonResponseIncorrectDate, _ := json.Marshal(dst.ResponseIncorrectDate)
		if string(jsonResponseIncorrectDate) == "{}" { // empty struct
			dst.ResponseIncorrectDate = nil
		} else {
			if err = validator.Validate(dst.ResponseIncorrectDate); err != nil {
				dst.ResponseIncorrectDate = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseIncorrectDate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ResponseCardCreate = nil
		dst.ResponseContentError1 = nil
		dst.ResponseIncorrectDate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentV2CardsMoveNmPost400Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentV2CardsMoveNmPost400Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentV2CardsMoveNmPost400Response) MarshalJSON() ([]byte, error) {
	if src.ResponseCardCreate != nil {
		return json.Marshal(&src.ResponseCardCreate)
	}

	if src.ResponseContentError1 != nil {
		return json.Marshal(&src.ResponseContentError1)
	}

	if src.ResponseIncorrectDate != nil {
		return json.Marshal(&src.ResponseIncorrectDate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentV2CardsMoveNmPost400Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ResponseCardCreate != nil {
		return obj.ResponseCardCreate
	}

	if obj.ResponseContentError1 != nil {
		return obj.ResponseContentError1
	}

	if obj.ResponseIncorrectDate != nil {
		return obj.ResponseIncorrectDate
	}

	// all schemas are nil
	return nil
}

type NullableContentV2CardsMoveNmPost400Response struct {
	value *ContentV2CardsMoveNmPost400Response
	isSet bool
}

func (v NullableContentV2CardsMoveNmPost400Response) Get() *ContentV2CardsMoveNmPost400Response {
	return v.value
}

func (v *NullableContentV2CardsMoveNmPost400Response) Set(val *ContentV2CardsMoveNmPost400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableContentV2CardsMoveNmPost400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableContentV2CardsMoveNmPost400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentV2CardsMoveNmPost400Response(val *ContentV2CardsMoveNmPost400Response) *NullableContentV2CardsMoveNmPost400Response {
	return &NullableContentV2CardsMoveNmPost400Response{value: val, isSet: true}
}

func (v NullableContentV2CardsMoveNmPost400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentV2CardsMoveNmPost400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
