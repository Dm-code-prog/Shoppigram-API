/*
Описание API Контента

 <dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code> <br>  <br>

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contentapi

import (
	"encoding/json"
)

// checks if the MediaErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MediaErrors{}

// MediaErrors struct for MediaErrors
type MediaErrors struct {
	// Дополнительные ошибки
	AdditionalErrors map[string]interface{} `json:"additionalErrors,omitempty"`
	Data             map[string]interface{} `json:"data,omitempty"`
	// Флаг ошибки
	Error *bool `json:"error,omitempty"`
	// Описание ошибки
	ErrorText *string `json:"errorText,omitempty"`
}

// NewMediaErrors instantiates a new MediaErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMediaErrors() *MediaErrors {
	this := MediaErrors{}
	return &this
}

// NewMediaErrorsWithDefaults instantiates a new MediaErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMediaErrorsWithDefaults() *MediaErrors {
	this := MediaErrors{}
	return &this
}

// GetAdditionalErrors returns the AdditionalErrors field value if set, zero value otherwise.
func (o *MediaErrors) GetAdditionalErrors() map[string]interface{} {
	if o == nil || IsNil(o.AdditionalErrors) {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalErrors
}

// GetAdditionalErrorsOk returns a tuple with the AdditionalErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaErrors) GetAdditionalErrorsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalErrors) {
		return map[string]interface{}{}, false
	}
	return o.AdditionalErrors, true
}

// HasAdditionalErrors returns a boolean if a field has been set.
func (o *MediaErrors) HasAdditionalErrors() bool {
	if o != nil && !IsNil(o.AdditionalErrors) {
		return true
	}

	return false
}

// SetAdditionalErrors gets a reference to the given map[string]interface{} and assigns it to the AdditionalErrors field.
func (o *MediaErrors) SetAdditionalErrors(v map[string]interface{}) {
	o.AdditionalErrors = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MediaErrors) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaErrors) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MediaErrors) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *MediaErrors) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MediaErrors) GetError() bool {
	if o == nil || IsNil(o.Error) {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaErrors) GetErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MediaErrors) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *MediaErrors) SetError(v bool) {
	o.Error = &v
}

// GetErrorText returns the ErrorText field value if set, zero value otherwise.
func (o *MediaErrors) GetErrorText() string {
	if o == nil || IsNil(o.ErrorText) {
		var ret string
		return ret
	}
	return *o.ErrorText
}

// GetErrorTextOk returns a tuple with the ErrorText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MediaErrors) GetErrorTextOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorText) {
		return nil, false
	}
	return o.ErrorText, true
}

// HasErrorText returns a boolean if a field has been set.
func (o *MediaErrors) HasErrorText() bool {
	if o != nil && !IsNil(o.ErrorText) {
		return true
	}

	return false
}

// SetErrorText gets a reference to the given string and assigns it to the ErrorText field.
func (o *MediaErrors) SetErrorText(v string) {
	o.ErrorText = &v
}

func (o MediaErrors) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MediaErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalErrors) {
		toSerialize["additionalErrors"] = o.AdditionalErrors
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.ErrorText) {
		toSerialize["errorText"] = o.ErrorText
	}
	return toSerialize, nil
}

type NullableMediaErrors struct {
	value *MediaErrors
	isSet bool
}

func (v NullableMediaErrors) Get() *MediaErrors {
	return v.value
}

func (v *NullableMediaErrors) Set(val *MediaErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableMediaErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableMediaErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMediaErrors(val *MediaErrors) *NullableMediaErrors {
	return &NullableMediaErrors{value: val, isSet: true}
}

func (v NullableMediaErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMediaErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
