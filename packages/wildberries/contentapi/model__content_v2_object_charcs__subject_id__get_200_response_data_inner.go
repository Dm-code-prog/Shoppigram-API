/*
Описание API Контента

 <dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code> <br>  <br>

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package contentapi

import (
	"encoding/json"
)

// checks if the ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner{}

// ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner struct for ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner
type ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner struct {
	// Идентификатор характеристики
	CharcID *int32 `json:"charcID,omitempty"`
	// Название предмета
	SubjectName *string `json:"subjectName,omitempty"`
	// Идентификатор предмета
	SubjectID *int32 `json:"subjectID,omitempty"`
	// Название характеристики
	Name *string `json:"name,omitempty"`
	// true - характеристику необходимо обязательно указать в КТ. false - характеристику не обязательно указывать
	Required *bool `json:"required,omitempty"`
	// Единица измерения
	UnitName *string `json:"unitName,omitempty"`
	// Максимальное кол-во значений, которое можно присвоить данной характеристике. Если 0, то нет ограничения.
	MaxCount *int32 `json:"maxCount,omitempty"`
	// Характеристика популярна у пользователей (true - да, false - нет)
	Popular *bool `json:"popular,omitempty"`
	// Тип характеристики (1 и 0 - строка или массив строк; 4 - число или массив чисел)
	CharcType *int32 `json:"charcType,omitempty"`
}

// NewContentV2ObjectCharcsSubjectIdGet200ResponseDataInner instantiates a new ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentV2ObjectCharcsSubjectIdGet200ResponseDataInner() *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner {
	this := ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner{}
	return &this
}

// NewContentV2ObjectCharcsSubjectIdGet200ResponseDataInnerWithDefaults instantiates a new ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentV2ObjectCharcsSubjectIdGet200ResponseDataInnerWithDefaults() *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner {
	this := ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner{}
	return &this
}

// GetCharcID returns the CharcID field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetCharcID() int32 {
	if o == nil || IsNil(o.CharcID) {
		var ret int32
		return ret
	}
	return *o.CharcID
}

// GetCharcIDOk returns a tuple with the CharcID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetCharcIDOk() (*int32, bool) {
	if o == nil || IsNil(o.CharcID) {
		return nil, false
	}
	return o.CharcID, true
}

// HasCharcID returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasCharcID() bool {
	if o != nil && !IsNil(o.CharcID) {
		return true
	}

	return false
}

// SetCharcID gets a reference to the given int32 and assigns it to the CharcID field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetCharcID(v int32) {
	o.CharcID = &v
}

// GetSubjectName returns the SubjectName field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetSubjectName() string {
	if o == nil || IsNil(o.SubjectName) {
		var ret string
		return ret
	}
	return *o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetSubjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectName) {
		return nil, false
	}
	return o.SubjectName, true
}

// HasSubjectName returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasSubjectName() bool {
	if o != nil && !IsNil(o.SubjectName) {
		return true
	}

	return false
}

// SetSubjectName gets a reference to the given string and assigns it to the SubjectName field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetSubjectName(v string) {
	o.SubjectName = &v
}

// GetSubjectID returns the SubjectID field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetSubjectID() int32 {
	if o == nil || IsNil(o.SubjectID) {
		var ret int32
		return ret
	}
	return *o.SubjectID
}

// GetSubjectIDOk returns a tuple with the SubjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetSubjectIDOk() (*int32, bool) {
	if o == nil || IsNil(o.SubjectID) {
		return nil, false
	}
	return o.SubjectID, true
}

// HasSubjectID returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasSubjectID() bool {
	if o != nil && !IsNil(o.SubjectID) {
		return true
	}

	return false
}

// SetSubjectID gets a reference to the given int32 and assigns it to the SubjectID field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetSubjectID(v int32) {
	o.SubjectID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetRequired(v bool) {
	o.Required = &v
}

// GetUnitName returns the UnitName field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetUnitName() string {
	if o == nil || IsNil(o.UnitName) {
		var ret string
		return ret
	}
	return *o.UnitName
}

// GetUnitNameOk returns a tuple with the UnitName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetUnitNameOk() (*string, bool) {
	if o == nil || IsNil(o.UnitName) {
		return nil, false
	}
	return o.UnitName, true
}

// HasUnitName returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasUnitName() bool {
	if o != nil && !IsNil(o.UnitName) {
		return true
	}

	return false
}

// SetUnitName gets a reference to the given string and assigns it to the UnitName field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetUnitName(v string) {
	o.UnitName = &v
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetMaxCount() int32 {
	if o == nil || IsNil(o.MaxCount) {
		var ret int32
		return ret
	}
	return *o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetMaxCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxCount) {
		return nil, false
	}
	return o.MaxCount, true
}

// HasMaxCount returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasMaxCount() bool {
	if o != nil && !IsNil(o.MaxCount) {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given int32 and assigns it to the MaxCount field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetMaxCount(v int32) {
	o.MaxCount = &v
}

// GetPopular returns the Popular field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetPopular() bool {
	if o == nil || IsNil(o.Popular) {
		var ret bool
		return ret
	}
	return *o.Popular
}

// GetPopularOk returns a tuple with the Popular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetPopularOk() (*bool, bool) {
	if o == nil || IsNil(o.Popular) {
		return nil, false
	}
	return o.Popular, true
}

// HasPopular returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasPopular() bool {
	if o != nil && !IsNil(o.Popular) {
		return true
	}

	return false
}

// SetPopular gets a reference to the given bool and assigns it to the Popular field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetPopular(v bool) {
	o.Popular = &v
}

// GetCharcType returns the CharcType field value if set, zero value otherwise.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetCharcType() int32 {
	if o == nil || IsNil(o.CharcType) {
		var ret int32
		return ret
	}
	return *o.CharcType
}

// GetCharcTypeOk returns a tuple with the CharcType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) GetCharcTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.CharcType) {
		return nil, false
	}
	return o.CharcType, true
}

// HasCharcType returns a boolean if a field has been set.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) HasCharcType() bool {
	if o != nil && !IsNil(o.CharcType) {
		return true
	}

	return false
}

// SetCharcType gets a reference to the given int32 and assigns it to the CharcType field.
func (o *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) SetCharcType(v int32) {
	o.CharcType = &v
}

func (o ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CharcID) {
		toSerialize["charcID"] = o.CharcID
	}
	if !IsNil(o.SubjectName) {
		toSerialize["subjectName"] = o.SubjectName
	}
	if !IsNil(o.SubjectID) {
		toSerialize["subjectID"] = o.SubjectID
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.UnitName) {
		toSerialize["unitName"] = o.UnitName
	}
	if !IsNil(o.MaxCount) {
		toSerialize["maxCount"] = o.MaxCount
	}
	if !IsNil(o.Popular) {
		toSerialize["popular"] = o.Popular
	}
	if !IsNil(o.CharcType) {
		toSerialize["charcType"] = o.CharcType
	}
	return toSerialize, nil
}

type NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner struct {
	value *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner
	isSet bool
}

func (v NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) Get() *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner {
	return v.value
}

func (v *NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) Set(val *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner(val *ContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) *NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner {
	return &NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner{value: val, isSet: true}
}

func (v NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentV2ObjectCharcsSubjectIdGet200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
