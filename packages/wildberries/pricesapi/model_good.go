/*
API цен и скидок

С помощью этих методов можно устанавливать цены и скидки. Максимум — 10 запросов за 6 секунд суммарно для всех методов раздела **Цены и скидки**.

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pricesapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Good type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Good{}

// Good struct for Good
type Good struct {
	// Артикул Wildberries
	NmID int32 `json:"nmID"`
	// Цена. Валюту можно получить с помощью метода [Получение списка товаров по артикулам](./#tag/Spiski-tovarov/paths/~1api~1v2~1list~1goods~1filter/get), поле `currencyIsoCode4217`
	Price *int32 `json:"price,omitempty"`
	// Скидка, %
	Discount *int32 `json:"discount,omitempty"`
}

type _Good Good

// NewGood instantiates a new Good object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGood(nmID int32) *Good {
	this := Good{}
	this.NmID = nmID
	return &this
}

// NewGoodWithDefaults instantiates a new Good object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodWithDefaults() *Good {
	this := Good{}
	return &this
}

// GetNmID returns the NmID field value
func (o *Good) GetNmID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NmID
}

// GetNmIDOk returns a tuple with the NmID field value
// and a boolean to check if the value has been set.
func (o *Good) GetNmIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NmID, true
}

// SetNmID sets field value
func (o *Good) SetNmID(v int32) {
	o.NmID = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Good) GetPrice() int32 {
	if o == nil || IsNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Good) GetPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Good) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *Good) SetPrice(v int32) {
	o.Price = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *Good) GetDiscount() int32 {
	if o == nil || IsNil(o.Discount) {
		var ret int32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Good) GetDiscountOk() (*int32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *Good) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given int32 and assigns it to the Discount field.
func (o *Good) SetDiscount(v int32) {
	o.Discount = &v
}

func (o Good) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Good) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nmID"] = o.NmID
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	return toSerialize, nil
}

func (o *Good) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nmID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGood := _Good{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGood)

	if err != nil {
		return err
	}

	*o = Good(varGood)

	return err
}

type NullableGood struct {
	value *Good
	isSet bool
}

func (v NullableGood) Get() *Good {
	return v.value
}

func (v *NullableGood) Set(val *Good) {
	v.value = val
	v.isSet = true
}

func (v NullableGood) IsSet() bool {
	return v.isSet
}

func (v *NullableGood) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGood(val *Good) *NullableGood {
	return &NullableGood{value: val, isSet: true}
}

func (v NullableGood) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGood) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
