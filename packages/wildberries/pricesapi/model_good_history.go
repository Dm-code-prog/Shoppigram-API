/*
API цен и скидок

С помощью этих методов можно устанавливать цены и скидки. Максимум — 10 запросов за 6 секунд суммарно для всех методов раздела **Цены и скидки**.

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pricesapi

import (
	"encoding/json"
)

// checks if the GoodHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodHistory{}

// GoodHistory struct for GoodHistory
type GoodHistory struct {
	// Артикул Wildberries
	NmID *int32 `json:"nmID,omitempty"`
	// Артикул продавца
	VendorCode *string `json:"vendorCode,omitempty"`
	// ID размера. В методах контента это поле `chrtID`
	SizeID *int32 `json:"sizeID,omitempty"`
	// Размер
	TechSizeName *string `json:"techSizeName,omitempty"`
	// Цена
	Price *int32 `json:"price,omitempty"`
	// Валюта, по стандарту ISO 4217
	CurrencyIsoCode4217 *string `json:"currencyIsoCode4217,omitempty"`
	// Скидка, %
	Discount *int32 `json:"discount,omitempty"`
	// Статус товара:    * `2` — товар без ошибок, цена и/или скидка обновилась   * `3` — есть ошибки, данные не обновились
	Status *int32 `json:"status,omitempty"`
	// Текст ошибки  <blockquote class=\"spoiler\">   <p class=\"descr\">Ошибка <code>The product is in quarantine</code> возникает, если новая цена со скидкой хотя бы в 3 раза меньше старой. Вы можете изменить цену или скидку с помощью API либо вывести товар из карантина <a href=\"https://seller.wildberries.ru/discount-and-prices/quarantine\">в личном кабинете</a></p> </blockquote>
	ErrorText *string `json:"errorText,omitempty"`
}

// NewGoodHistory instantiates a new GoodHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodHistory() *GoodHistory {
	this := GoodHistory{}
	return &this
}

// NewGoodHistoryWithDefaults instantiates a new GoodHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodHistoryWithDefaults() *GoodHistory {
	this := GoodHistory{}
	return &this
}

// GetNmID returns the NmID field value if set, zero value otherwise.
func (o *GoodHistory) GetNmID() int32 {
	if o == nil || IsNil(o.NmID) {
		var ret int32
		return ret
	}
	return *o.NmID
}

// GetNmIDOk returns a tuple with the NmID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetNmIDOk() (*int32, bool) {
	if o == nil || IsNil(o.NmID) {
		return nil, false
	}
	return o.NmID, true
}

// HasNmID returns a boolean if a field has been set.
func (o *GoodHistory) HasNmID() bool {
	if o != nil && !IsNil(o.NmID) {
		return true
	}

	return false
}

// SetNmID gets a reference to the given int32 and assigns it to the NmID field.
func (o *GoodHistory) SetNmID(v int32) {
	o.NmID = &v
}

// GetVendorCode returns the VendorCode field value if set, zero value otherwise.
func (o *GoodHistory) GetVendorCode() string {
	if o == nil || IsNil(o.VendorCode) {
		var ret string
		return ret
	}
	return *o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetVendorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorCode) {
		return nil, false
	}
	return o.VendorCode, true
}

// HasVendorCode returns a boolean if a field has been set.
func (o *GoodHistory) HasVendorCode() bool {
	if o != nil && !IsNil(o.VendorCode) {
		return true
	}

	return false
}

// SetVendorCode gets a reference to the given string and assigns it to the VendorCode field.
func (o *GoodHistory) SetVendorCode(v string) {
	o.VendorCode = &v
}

// GetSizeID returns the SizeID field value if set, zero value otherwise.
func (o *GoodHistory) GetSizeID() int32 {
	if o == nil || IsNil(o.SizeID) {
		var ret int32
		return ret
	}
	return *o.SizeID
}

// GetSizeIDOk returns a tuple with the SizeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetSizeIDOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeID) {
		return nil, false
	}
	return o.SizeID, true
}

// HasSizeID returns a boolean if a field has been set.
func (o *GoodHistory) HasSizeID() bool {
	if o != nil && !IsNil(o.SizeID) {
		return true
	}

	return false
}

// SetSizeID gets a reference to the given int32 and assigns it to the SizeID field.
func (o *GoodHistory) SetSizeID(v int32) {
	o.SizeID = &v
}

// GetTechSizeName returns the TechSizeName field value if set, zero value otherwise.
func (o *GoodHistory) GetTechSizeName() string {
	if o == nil || IsNil(o.TechSizeName) {
		var ret string
		return ret
	}
	return *o.TechSizeName
}

// GetTechSizeNameOk returns a tuple with the TechSizeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetTechSizeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TechSizeName) {
		return nil, false
	}
	return o.TechSizeName, true
}

// HasTechSizeName returns a boolean if a field has been set.
func (o *GoodHistory) HasTechSizeName() bool {
	if o != nil && !IsNil(o.TechSizeName) {
		return true
	}

	return false
}

// SetTechSizeName gets a reference to the given string and assigns it to the TechSizeName field.
func (o *GoodHistory) SetTechSizeName(v string) {
	o.TechSizeName = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *GoodHistory) GetPrice() int32 {
	if o == nil || IsNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *GoodHistory) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *GoodHistory) SetPrice(v int32) {
	o.Price = &v
}

// GetCurrencyIsoCode4217 returns the CurrencyIsoCode4217 field value if set, zero value otherwise.
func (o *GoodHistory) GetCurrencyIsoCode4217() string {
	if o == nil || IsNil(o.CurrencyIsoCode4217) {
		var ret string
		return ret
	}
	return *o.CurrencyIsoCode4217
}

// GetCurrencyIsoCode4217Ok returns a tuple with the CurrencyIsoCode4217 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetCurrencyIsoCode4217Ok() (*string, bool) {
	if o == nil || IsNil(o.CurrencyIsoCode4217) {
		return nil, false
	}
	return o.CurrencyIsoCode4217, true
}

// HasCurrencyIsoCode4217 returns a boolean if a field has been set.
func (o *GoodHistory) HasCurrencyIsoCode4217() bool {
	if o != nil && !IsNil(o.CurrencyIsoCode4217) {
		return true
	}

	return false
}

// SetCurrencyIsoCode4217 gets a reference to the given string and assigns it to the CurrencyIsoCode4217 field.
func (o *GoodHistory) SetCurrencyIsoCode4217(v string) {
	o.CurrencyIsoCode4217 = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *GoodHistory) GetDiscount() int32 {
	if o == nil || IsNil(o.Discount) {
		var ret int32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetDiscountOk() (*int32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *GoodHistory) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given int32 and assigns it to the Discount field.
func (o *GoodHistory) SetDiscount(v int32) {
	o.Discount = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GoodHistory) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GoodHistory) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *GoodHistory) SetStatus(v int32) {
	o.Status = &v
}

// GetErrorText returns the ErrorText field value if set, zero value otherwise.
func (o *GoodHistory) GetErrorText() string {
	if o == nil || IsNil(o.ErrorText) {
		var ret string
		return ret
	}
	return *o.ErrorText
}

// GetErrorTextOk returns a tuple with the ErrorText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodHistory) GetErrorTextOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorText) {
		return nil, false
	}
	return o.ErrorText, true
}

// HasErrorText returns a boolean if a field has been set.
func (o *GoodHistory) HasErrorText() bool {
	if o != nil && !IsNil(o.ErrorText) {
		return true
	}

	return false
}

// SetErrorText gets a reference to the given string and assigns it to the ErrorText field.
func (o *GoodHistory) SetErrorText(v string) {
	o.ErrorText = &v
}

func (o GoodHistory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NmID) {
		toSerialize["nmID"] = o.NmID
	}
	if !IsNil(o.VendorCode) {
		toSerialize["vendorCode"] = o.VendorCode
	}
	if !IsNil(o.SizeID) {
		toSerialize["sizeID"] = o.SizeID
	}
	if !IsNil(o.TechSizeName) {
		toSerialize["techSizeName"] = o.TechSizeName
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.CurrencyIsoCode4217) {
		toSerialize["currencyIsoCode4217"] = o.CurrencyIsoCode4217
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ErrorText) {
		toSerialize["errorText"] = o.ErrorText
	}
	return toSerialize, nil
}

type NullableGoodHistory struct {
	value *GoodHistory
	isSet bool
}

func (v NullableGoodHistory) Get() *GoodHistory {
	return v.value
}

func (v *NullableGoodHistory) Set(val *GoodHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodHistory(val *GoodHistory) *NullableGoodHistory {
	return &NullableGoodHistory{value: val, isSet: true}
}

func (v NullableGoodHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
