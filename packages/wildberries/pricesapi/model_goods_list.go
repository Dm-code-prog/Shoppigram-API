/*
API цен и скидок

С помощью этих методов можно устанавливать цены и скидки. Максимум — 10 запросов за 6 секунд суммарно для всех методов раздела **Цены и скидки**.

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pricesapi

import (
	"encoding/json"
)

// checks if the GoodsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodsList{}

// GoodsList Размеры товара
type GoodsList struct {
	// Артикул Wildberries
	NmID *int32 `json:"nmID,omitempty"`
	// Артикул продавца
	VendorCode *string `json:"vendorCode,omitempty"`
	// Размер
	Sizes []GoodsListSizesInner `json:"sizes,omitempty"`
	// Валюта, по стандарту ISO 4217
	CurrencyIsoCode4217 *string `json:"currencyIsoCode4217,omitempty"`
	// Скидка, %
	Discount *int32 `json:"discount,omitempty"`
	// Можно ли устанавливать цены отдельно для разных размеров: `true` — можно, `false` — нельзя. Эта возможность зависит от категории товара
	EditableSizePrice *bool `json:"editableSizePrice,omitempty"`
}

// NewGoodsList instantiates a new GoodsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodsList() *GoodsList {
	this := GoodsList{}
	return &this
}

// NewGoodsListWithDefaults instantiates a new GoodsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodsListWithDefaults() *GoodsList {
	this := GoodsList{}
	return &this
}

// GetNmID returns the NmID field value if set, zero value otherwise.
func (o *GoodsList) GetNmID() int32 {
	if o == nil || IsNil(o.NmID) {
		var ret int32
		return ret
	}
	return *o.NmID
}

// GetNmIDOk returns a tuple with the NmID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsList) GetNmIDOk() (*int32, bool) {
	if o == nil || IsNil(o.NmID) {
		return nil, false
	}
	return o.NmID, true
}

// HasNmID returns a boolean if a field has been set.
func (o *GoodsList) HasNmID() bool {
	if o != nil && !IsNil(o.NmID) {
		return true
	}

	return false
}

// SetNmID gets a reference to the given int32 and assigns it to the NmID field.
func (o *GoodsList) SetNmID(v int32) {
	o.NmID = &v
}

// GetVendorCode returns the VendorCode field value if set, zero value otherwise.
func (o *GoodsList) GetVendorCode() string {
	if o == nil || IsNil(o.VendorCode) {
		var ret string
		return ret
	}
	return *o.VendorCode
}

// GetVendorCodeOk returns a tuple with the VendorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsList) GetVendorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VendorCode) {
		return nil, false
	}
	return o.VendorCode, true
}

// HasVendorCode returns a boolean if a field has been set.
func (o *GoodsList) HasVendorCode() bool {
	if o != nil && !IsNil(o.VendorCode) {
		return true
	}

	return false
}

// SetVendorCode gets a reference to the given string and assigns it to the VendorCode field.
func (o *GoodsList) SetVendorCode(v string) {
	o.VendorCode = &v
}

// GetSizes returns the Sizes field value if set, zero value otherwise.
func (o *GoodsList) GetSizes() []GoodsListSizesInner {
	if o == nil || IsNil(o.Sizes) {
		var ret []GoodsListSizesInner
		return ret
	}
	return o.Sizes
}

// GetSizesOk returns a tuple with the Sizes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsList) GetSizesOk() ([]GoodsListSizesInner, bool) {
	if o == nil || IsNil(o.Sizes) {
		return nil, false
	}
	return o.Sizes, true
}

// HasSizes returns a boolean if a field has been set.
func (o *GoodsList) HasSizes() bool {
	if o != nil && !IsNil(o.Sizes) {
		return true
	}

	return false
}

// SetSizes gets a reference to the given []GoodsListSizesInner and assigns it to the Sizes field.
func (o *GoodsList) SetSizes(v []GoodsListSizesInner) {
	o.Sizes = v
}

// GetCurrencyIsoCode4217 returns the CurrencyIsoCode4217 field value if set, zero value otherwise.
func (o *GoodsList) GetCurrencyIsoCode4217() string {
	if o == nil || IsNil(o.CurrencyIsoCode4217) {
		var ret string
		return ret
	}
	return *o.CurrencyIsoCode4217
}

// GetCurrencyIsoCode4217Ok returns a tuple with the CurrencyIsoCode4217 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsList) GetCurrencyIsoCode4217Ok() (*string, bool) {
	if o == nil || IsNil(o.CurrencyIsoCode4217) {
		return nil, false
	}
	return o.CurrencyIsoCode4217, true
}

// HasCurrencyIsoCode4217 returns a boolean if a field has been set.
func (o *GoodsList) HasCurrencyIsoCode4217() bool {
	if o != nil && !IsNil(o.CurrencyIsoCode4217) {
		return true
	}

	return false
}

// SetCurrencyIsoCode4217 gets a reference to the given string and assigns it to the CurrencyIsoCode4217 field.
func (o *GoodsList) SetCurrencyIsoCode4217(v string) {
	o.CurrencyIsoCode4217 = &v
}

// GetDiscount returns the Discount field value if set, zero value otherwise.
func (o *GoodsList) GetDiscount() int32 {
	if o == nil || IsNil(o.Discount) {
		var ret int32
		return ret
	}
	return *o.Discount
}

// GetDiscountOk returns a tuple with the Discount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsList) GetDiscountOk() (*int32, bool) {
	if o == nil || IsNil(o.Discount) {
		return nil, false
	}
	return o.Discount, true
}

// HasDiscount returns a boolean if a field has been set.
func (o *GoodsList) HasDiscount() bool {
	if o != nil && !IsNil(o.Discount) {
		return true
	}

	return false
}

// SetDiscount gets a reference to the given int32 and assigns it to the Discount field.
func (o *GoodsList) SetDiscount(v int32) {
	o.Discount = &v
}

// GetEditableSizePrice returns the EditableSizePrice field value if set, zero value otherwise.
func (o *GoodsList) GetEditableSizePrice() bool {
	if o == nil || IsNil(o.EditableSizePrice) {
		var ret bool
		return ret
	}
	return *o.EditableSizePrice
}

// GetEditableSizePriceOk returns a tuple with the EditableSizePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsList) GetEditableSizePriceOk() (*bool, bool) {
	if o == nil || IsNil(o.EditableSizePrice) {
		return nil, false
	}
	return o.EditableSizePrice, true
}

// HasEditableSizePrice returns a boolean if a field has been set.
func (o *GoodsList) HasEditableSizePrice() bool {
	if o != nil && !IsNil(o.EditableSizePrice) {
		return true
	}

	return false
}

// SetEditableSizePrice gets a reference to the given bool and assigns it to the EditableSizePrice field.
func (o *GoodsList) SetEditableSizePrice(v bool) {
	o.EditableSizePrice = &v
}

func (o GoodsList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NmID) {
		toSerialize["nmID"] = o.NmID
	}
	if !IsNil(o.VendorCode) {
		toSerialize["vendorCode"] = o.VendorCode
	}
	if !IsNil(o.Sizes) {
		toSerialize["sizes"] = o.Sizes
	}
	if !IsNil(o.CurrencyIsoCode4217) {
		toSerialize["currencyIsoCode4217"] = o.CurrencyIsoCode4217
	}
	if !IsNil(o.Discount) {
		toSerialize["discount"] = o.Discount
	}
	if !IsNil(o.EditableSizePrice) {
		toSerialize["editableSizePrice"] = o.EditableSizePrice
	}
	return toSerialize, nil
}

type NullableGoodsList struct {
	value *GoodsList
	isSet bool
}

func (v NullableGoodsList) Get() *GoodsList {
	return v.value
}

func (v *NullableGoodsList) Set(val *GoodsList) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsList) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsList(val *GoodsList) *NullableGoodsList {
	return &NullableGoodsList{value: val, isSet: true}
}

func (v NullableGoodsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
