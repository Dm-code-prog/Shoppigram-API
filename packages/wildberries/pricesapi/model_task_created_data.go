/*
API цен и скидок

С помощью этих методов можно устанавливать цены и скидки. Максимум — 10 запросов за 6 секунд суммарно для всех методов раздела **Цены и скидки**.

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pricesapi

import (
	"encoding/json"
)

// checks if the TaskCreatedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskCreatedData{}

// TaskCreatedData struct for TaskCreatedData
type TaskCreatedData struct {
	// ID загрузки
	Id *int32 `json:"id,omitempty"`
	// Флаг дублирования загрузки: `true` — такая загрузка уже есть
	AlreadyExists *bool `json:"alreadyExists,omitempty"`
}

// NewTaskCreatedData instantiates a new TaskCreatedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskCreatedData() *TaskCreatedData {
	this := TaskCreatedData{}
	return &this
}

// NewTaskCreatedDataWithDefaults instantiates a new TaskCreatedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskCreatedDataWithDefaults() *TaskCreatedData {
	this := TaskCreatedData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaskCreatedData) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCreatedData) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaskCreatedData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *TaskCreatedData) SetId(v int32) {
	o.Id = &v
}

// GetAlreadyExists returns the AlreadyExists field value if set, zero value otherwise.
func (o *TaskCreatedData) GetAlreadyExists() bool {
	if o == nil || IsNil(o.AlreadyExists) {
		var ret bool
		return ret
	}
	return *o.AlreadyExists
}

// GetAlreadyExistsOk returns a tuple with the AlreadyExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskCreatedData) GetAlreadyExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.AlreadyExists) {
		return nil, false
	}
	return o.AlreadyExists, true
}

// HasAlreadyExists returns a boolean if a field has been set.
func (o *TaskCreatedData) HasAlreadyExists() bool {
	if o != nil && !IsNil(o.AlreadyExists) {
		return true
	}

	return false
}

// SetAlreadyExists gets a reference to the given bool and assigns it to the AlreadyExists field.
func (o *TaskCreatedData) SetAlreadyExists(v bool) {
	o.AlreadyExists = &v
}

func (o TaskCreatedData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskCreatedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AlreadyExists) {
		toSerialize["alreadyExists"] = o.AlreadyExists
	}
	return toSerialize, nil
}

type NullableTaskCreatedData struct {
	value *TaskCreatedData
	isSet bool
}

func (v NullableTaskCreatedData) Get() *TaskCreatedData {
	return v.value
}

func (v *NullableTaskCreatedData) Set(val *TaskCreatedData) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskCreatedData) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskCreatedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskCreatedData(val *TaskCreatedData) *NullableTaskCreatedData {
	return &NullableTaskCreatedData{value: val, isSet: true}
}

func (v NullableTaskCreatedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskCreatedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
