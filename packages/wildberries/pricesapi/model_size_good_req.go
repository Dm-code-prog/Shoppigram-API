/*
API цен и скидок

С помощью этих методов можно устанавливать цены и скидки. Максимум — 10 запросов за 6 секунд суммарно для всех методов раздела **Цены и скидки**.

API version:
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pricesapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SizeGoodReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SizeGoodReq{}

// SizeGoodReq struct for SizeGoodReq
type SizeGoodReq struct {
	// Артикул Wildberries
	NmID int32 `json:"nmID"`
	// ID размера. Можно получить с помощью метода [Получение списка товаров по артикулам](./#tag/Spiski-tovarov/paths/~1api~1v2~1list~1goods~1filter/get), поле `sizeID`. В методах контента это поле `chrtID`
	SizeID int32 `json:"sizeID"`
	// Цена. Валюту можно получить с помощью метода [Получение списка товаров по артикулам](./#tag/Spiski-tovarov/paths/~1api~1v2~1list~1goods~1filter/get), поле `currencyIsoCode4217`
	Price int32 `json:"price"`
}

type _SizeGoodReq SizeGoodReq

// NewSizeGoodReq instantiates a new SizeGoodReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSizeGoodReq(nmID int32, sizeID int32, price int32) *SizeGoodReq {
	this := SizeGoodReq{}
	this.NmID = nmID
	this.SizeID = sizeID
	this.Price = price
	return &this
}

// NewSizeGoodReqWithDefaults instantiates a new SizeGoodReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSizeGoodReqWithDefaults() *SizeGoodReq {
	this := SizeGoodReq{}
	return &this
}

// GetNmID returns the NmID field value
func (o *SizeGoodReq) GetNmID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NmID
}

// GetNmIDOk returns a tuple with the NmID field value
// and a boolean to check if the value has been set.
func (o *SizeGoodReq) GetNmIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NmID, true
}

// SetNmID sets field value
func (o *SizeGoodReq) SetNmID(v int32) {
	o.NmID = v
}

// GetSizeID returns the SizeID field value
func (o *SizeGoodReq) GetSizeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SizeID
}

// GetSizeIDOk returns a tuple with the SizeID field value
// and a boolean to check if the value has been set.
func (o *SizeGoodReq) GetSizeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SizeID, true
}

// SetSizeID sets field value
func (o *SizeGoodReq) SetSizeID(v int32) {
	o.SizeID = v
}

// GetPrice returns the Price field value
func (o *SizeGoodReq) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SizeGoodReq) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SizeGoodReq) SetPrice(v int32) {
	o.Price = v
}

func (o SizeGoodReq) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SizeGoodReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nmID"] = o.NmID
	toSerialize["sizeID"] = o.SizeID
	toSerialize["price"] = o.Price
	return toSerialize, nil
}

func (o *SizeGoodReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nmID",
		"sizeID",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSizeGoodReq := _SizeGoodReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSizeGoodReq)

	if err != nil {
		return err
	}

	*o = SizeGoodReq(varSizeGoodReq)

	return err
}

type NullableSizeGoodReq struct {
	value *SizeGoodReq
	isSet bool
}

func (v NullableSizeGoodReq) Get() *SizeGoodReq {
	return v.value
}

func (v *NullableSizeGoodReq) Set(val *SizeGoodReq) {
	v.value = val
	v.isSet = true
}

func (v NullableSizeGoodReq) IsSet() bool {
	return v.isSet
}

func (v *NullableSizeGoodReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSizeGoodReq(val *SizeGoodReq) *NullableSizeGoodReq {
	return &NullableSizeGoodReq{value: val, isSet: true}
}

func (v NullableSizeGoodReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSizeGoodReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
