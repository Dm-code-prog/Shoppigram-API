name: Build and Deploy to AWS ECS
on:
  pull_request:
    branches:
      - main

jobs:
  deploy_to_ecs:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      - name: Install dependencies
        run: go mod download

      - name: Test with the Go CLI
        run: |
          go vet --mod=readonly ./...
          go test --mod=readonly -cover -v ./...
      - name: Build the image and Push to ECR
        id: build_and_push_image
        env:
          ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY_NAME_DEV }}/${{ vars.SERVICE_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t marketplace-api:$IMAGE_TAG .
          
          docker tag marketplace-api:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./aws/ecs/dev/task-definition.json
          container-name: marketplace-api-server
          image: ${{ steps.build_and_push_image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-definition.outputs.task-definition }}
          service: ${{ vars.SERVICE_NAME }}
          cluster: ${{ vars.AWS_ECS_CLUSTER_NAME_DEV }}
          wait-for-service-stability: true