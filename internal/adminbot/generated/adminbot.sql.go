// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: adminbot.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAdminBotToken = `-- name: GetAdminBotToken :one
select pgp_sym_decrypt(admin_bot_encr_token, $2::text)
from web_apps
where id = $1
`

type GetAdminBotTokenParams struct {
	ID            uuid.UUID
	EncryptionKey string
}

func (q *Queries) GetAdminBotToken(ctx context.Context, arg GetAdminBotTokenParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, getAdminBotToken, arg.ID, arg.EncryptionKey)
	var pgp_sym_decrypt interface{}
	err := row.Scan(&pgp_sym_decrypt)
	return pgp_sym_decrypt, err
}

const getAdminsNotificationList = `-- name: GetAdminsNotificationList :many
select admin_username
from notify_list
where web_app_id = $1
`

func (q *Queries) GetAdminsNotificationList(ctx context.Context, webAppID pgtype.UUID) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getAdminsNotificationList, webAppID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var admin_username pgtype.Text
		if err := rows.Scan(&admin_username); err != nil {
			return nil, err
		}
		items = append(items, admin_username)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
