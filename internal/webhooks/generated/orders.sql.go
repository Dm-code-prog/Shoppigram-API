// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getOrder = `-- name: GetOrder :one
select o.id,
       o.updated_at,
       sum(op.quantity::float * p.price)::float as order_sum,
       MAX(wa.currency)::text                   as price_currency,
       o.state
from orders o
         join order_products op on op.order_id = o.id
         join products p on p.id = op.product_id
         left join web_apps wa on wa.id = o.web_app_id
where o.id = $1
group by o.id
`

type GetOrderRow struct {
	ID            uuid.UUID
	UpdatedAt     pgtype.Timestamp
	OrderSum      float64
	PriceCurrency string
	State         OrderState
}

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (GetOrderRow, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i GetOrderRow
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.OrderSum,
		&i.PriceCurrency,
		&i.State,
	)
	return i, err
}

const savePaymentExtraInfo = `-- name: SavePaymentExtraInfo :exec
insert into payments_extra_info (invoice_id, provider, event_type, extra_info, response, error)
values ($1,
        $2,
        $3,
        $4,
        $5,
        $6)
`

type SavePaymentExtraInfoParams struct {
	InvoiceID pgtype.UUID
	Provider  PaymentProviders
	EventType PaymentsEventType
	ExtraInfo []byte
	Response  []byte
	Error     pgtype.Text
}

func (q *Queries) SavePaymentExtraInfo(ctx context.Context, arg SavePaymentExtraInfoParams) error {
	_, err := q.db.Exec(ctx, savePaymentExtraInfo,
		arg.InvoiceID,
		arg.Provider,
		arg.EventType,
		arg.ExtraInfo,
		arg.Response,
		arg.Error,
	)
	return err
}

const setOrderStateConfirmed = `-- name: SetOrderStateConfirmed :exec
update orders
set state = 'confirmed'::order_state
where id = $1
  and type = 'online'::order_type
`

func (q *Queries) SetOrderStateConfirmed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, setOrderStateConfirmed, id)
	return err
}
