// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getOrder = `-- name: GetOrder :one
select o.id, o.updated_at, sum(op.quantity::float * p.price)::float as order_sum, MAX(p.price_currency)::text as price_currency
from orders o
	 join order_products op on op.order_id = o.id
	 join products p on p.id = op.product_id
where o.id = $1
group by o.id
`

type GetOrderRow struct {
	ID            uuid.UUID
	UpdatedAt     pgtype.Timestamp
	OrderSum      float64
	PriceCurrency string
}

func (q *Queries) GetOrder(ctx context.Context, id uuid.UUID) (GetOrderRow, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i GetOrderRow
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.OrderSum,
		&i.PriceCurrency,
	)
	return i, err
}
