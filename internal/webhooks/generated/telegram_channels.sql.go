// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: telegram_channels.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateTelegramChannel = `-- name: CreateOrUpdateTelegramChannel :exec
insert into telegram_channels (external_id, title, name, is_public, owner_external_id)
values ($1, $2, $3, $4, $5)
on conflict (external_id) do update
    set title             = $2,
        name              = $3,
        is_public         = $4,
        owner_external_id = $5
`

type CreateOrUpdateTelegramChannelParams struct {
	ExternalID      int64
	Title           string
	Name            pgtype.Text
	IsPublic        bool
	OwnerExternalID int64
}

func (q *Queries) CreateOrUpdateTelegramChannel(ctx context.Context, arg CreateOrUpdateTelegramChannelParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateTelegramChannel,
		arg.ExternalID,
		arg.Title,
		arg.Name,
		arg.IsPublic,
		arg.OwnerExternalID,
	)
	return err
}

const deleteTelegramChannel = `-- name: DeleteTelegramChannel :exec
delete
from telegram_channels
where external_id = $1
`

func (q *Queries) DeleteTelegramChannel(ctx context.Context, externalID int64) error {
	_, err := q.db.Exec(ctx, deleteTelegramChannel, externalID)
	return err
}

const getTelegramChannelOwner = `-- name: GetTelegramChannelOwner :one
select owner_external_id
from telegram_channels
where external_id = $1
`

func (q *Queries) GetTelegramChannelOwner(ctx context.Context, externalID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTelegramChannelOwner, externalID)
	var owner_external_id int64
	err := row.Scan(&owner_external_id)
	return owner_external_id, err
}
