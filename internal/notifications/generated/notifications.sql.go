// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: notifications.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAdminsNotificationList = `-- name: GetAdminsNotificationList :many
select admin_username, admin_chat_id
from new_order_notifications_list
where web_app_id = $1
`

type GetAdminsNotificationListRow struct {
	AdminUsername pgtype.Text
	AdminChatID   int64
}

func (q *Queries) GetAdminsNotificationList(ctx context.Context, webAppID pgtype.UUID) ([]GetAdminsNotificationListRow, error) {
	rows, err := q.db.Query(ctx, getAdminsNotificationList, webAppID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdminsNotificationListRow
	for rows.Next() {
		var i GetAdminsNotificationListRow
		if err := rows.Scan(&i.AdminUsername, &i.AdminChatID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsForNewMarketplacesAfterCursor = `-- name: GetNotificationsForNewMarketplacesAfterCursor :many
with marketplaces_batch as (select wa.id,
                                   wa.name,
                                   wa.short_name,
                                   wa.created_at,
                                   wa.owner_external_id
         from web_apps wa
         where wa.is_verified = false
         and wa.created_at > $1
         order by wa.created_at
         limit $2)
select marketplaces_batch.id,
       marketplaces_batch.name,
       marketplaces_batch.short_name,
       marketplaces_batch.created_at,
       u.username
from marketplaces_batch
         join telegram_users u
              on marketplaces_batch.owner_external_id = u.external_id
order by marketplaces_batch.created_at
`

type GetNotificationsForNewMarketplacesAfterCursorParams struct {
	CreatedAt pgtype.Timestamp
	Limit     int32
}

type GetNotificationsForNewMarketplacesAfterCursorRow struct {
	ID        uuid.UUID
	Name      string
	ShortName string
	CreatedAt pgtype.Timestamp
	Username  pgtype.Text
}

func (q *Queries) GetNotificationsForNewMarketplacesAfterCursor(ctx context.Context, arg GetNotificationsForNewMarketplacesAfterCursorParams) ([]GetNotificationsForNewMarketplacesAfterCursorRow, error) {
	rows, err := q.db.Query(ctx, getNotificationsForNewMarketplacesAfterCursor, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationsForNewMarketplacesAfterCursorRow
	for rows.Next() {
		var i GetNotificationsForNewMarketplacesAfterCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ShortName,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsForNewOrdersAfterCursor = `-- name: GetNotificationsForNewOrdersAfterCursor :many
with orders_batch as (select id as order_id, created_at, readable_id, web_app_id, external_user_id
                      from orders o
                      where o.created_at > $1
                      order by o.created_at
                      limit $2)
select orders_batch.order_id,
       orders_batch.readable_id,
       orders_batch.created_at,
       p.web_app_id,
       wa.name as web_app_name,
       p.name,
       p.price,
       p.price_currency,
       op.quantity,
       u.username
from orders_batch
         join order_products op
              on orders_batch.order_id = op.order_id
         join products p on p.id = op.product_id
         join telegram_users u on external_user_id = u.external_id
         join web_apps wa on orders_batch.web_app_id = wa.id
order by orders_batch.created_at
`

type GetNotificationsForNewOrdersAfterCursorParams struct {
	CreatedAt pgtype.Timestamp
	Limit     int32
}

type GetNotificationsForNewOrdersAfterCursorRow struct {
	OrderID       uuid.UUID
	ReadableID    pgtype.Int8
	CreatedAt     pgtype.Timestamp
	WebAppID      pgtype.UUID
	WebAppName    string
	Name          string
	Price         float64
	PriceCurrency string
	Quantity      int32
	Username      pgtype.Text
}

func (q *Queries) GetNotificationsForNewOrdersAfterCursor(ctx context.Context, arg GetNotificationsForNewOrdersAfterCursorParams) ([]GetNotificationsForNewOrdersAfterCursorRow, error) {
	rows, err := q.db.Query(ctx, getNotificationsForNewOrdersAfterCursor, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationsForNewOrdersAfterCursorRow
	for rows.Next() {
		var i GetNotificationsForNewOrdersAfterCursorRow
		if err := rows.Scan(
			&i.OrderID,
			&i.ReadableID,
			&i.CreatedAt,
			&i.WebAppID,
			&i.WebAppName,
			&i.Name,
			&i.Price,
			&i.PriceCurrency,
			&i.Quantity,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotifierCursor = `-- name: GetNotifierCursor :one
select cursor_date, last_processed_id
from notifier_cursors
where name = $1
`

type GetNotifierCursorRow struct {
	CursorDate      pgtype.Timestamp
	LastProcessedID pgtype.UUID
}

func (q *Queries) GetNotifierCursor(ctx context.Context, name pgtype.Text) (GetNotifierCursorRow, error) {
	row := q.db.QueryRow(ctx, getNotifierCursor, name)
	var i GetNotifierCursorRow
	err := row.Scan(&i.CursorDate, &i.LastProcessedID)
	return i, err
}

const getReviewersNotificationList = `-- name: GetReviewersNotificationList :many
select chat_id
from new_web_apps_notifications_list
`

func (q *Queries) GetReviewersNotificationList(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getReviewersNotificationList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var chat_id int64
		if err := rows.Scan(&chat_id); err != nil {
			return nil, err
		}
		items = append(items, chat_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotifierCursor = `-- name: UpdateNotifierCursor :exec
update notifier_cursors
set cursor_date = $2,
    last_processed_id = $3
where name = $1
`

type UpdateNotifierCursorParams struct {
	Name            pgtype.Text
	CursorDate      pgtype.Timestamp
	LastProcessedID pgtype.UUID
}

func (q *Queries) UpdateNotifierCursor(ctx context.Context, arg UpdateNotifierCursorParams) error {
	_, err := q.db.Exec(ctx, updateNotifierCursor, arg.Name, arg.CursorDate, arg.LastProcessedID)
	return err
}
