// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: balance.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getBalance = `-- name: GetBalance :many
select sum((p.price - (p.price * wa.commission_percent) - wa.commission_fixed) * op.quantity) as balance, wa.currency
from web_apps wa
         left join orders o on wa.id = o.web_app_id
         left join order_products op on o.id = op.order_id
         left join products p on op.product_id = p.id
where wa.owner_external_id = $1
  and o.type = 'online'
  and o.state = 'done'
group by currency
`

type GetBalanceRow struct {
	Balance  int64
	Currency ProductCurrency
}

func (q *Queries) GetBalance(ctx context.Context, ownerExternalID pgtype.Int8) ([]GetBalanceRow, error) {
	rows, err := q.db.Query(ctx, getBalance, ownerExternalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBalanceRow
	for rows.Next() {
		var i GetBalanceRow
		if err := rows.Scan(&i.Balance, &i.Currency); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
