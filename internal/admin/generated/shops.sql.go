// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shops.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUserShops = `-- name: CountUserShops :one
select count(*)
from web_apps
where owner_external_id = $1
  and is_deleted = false
`

func (q *Queries) CountUserShops(ctx context.Context, ownerExternalID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countUserShops, ownerExternalID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createShop = `-- name: CreateShop :one
insert into web_apps (name, owner_external_id, short_name, currency, type)
values ($1,
        $2,
        $3,
        $4,
        $5)
returning id
`

type CreateShopParams struct {
	Name            string
	OwnerExternalID pgtype.Int8
	ShortName       string
	Currency        ProductCurrency
	Type            WebAppType
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createShop,
		arg.Name,
		arg.OwnerExternalID,
		arg.ShortName,
		arg.Currency,
		arg.Type,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const enableShopSync = `-- name: EnableShopSync :exec
insert
into shop_external_connections
    (web_app_id, external_provider, api_key, is_active)
values ($1, $2, $3, $4)
on conflict (web_app_id, external_provider)
    do update set api_key   = $3,
                  is_active = $4
`

type EnableShopSyncParams struct {
	WebAppID         uuid.UUID
	ExternalProvider ExternalProvider
	ApiKey           string
	IsActive         bool
}

func (q *Queries) EnableShopSync(ctx context.Context, arg EnableShopSyncParams) error {
	_, err := q.db.Exec(ctx, enableShopSync,
		arg.WebAppID,
		arg.ExternalProvider,
		arg.ApiKey,
		arg.IsActive,
	)
	return err
}

const getShop = `-- name: GetShop :one
select wa.id,
       wa.name,
       wa.is_verified,
       wa.short_name,
       wa.currency,
       wa.type,
       sec.external_provider,
       sec.is_active,
       sec.last_sync_at,
       sec.last_sync_status
from web_apps wa
         left join shop_external_connections sec on wa.id = sec.web_app_id
where wa.id = $1
  and wa.owner_external_id = $2
  and is_deleted = false
`

type GetShopParams struct {
	ID              uuid.UUID
	OwnerExternalID pgtype.Int8
}

type GetShopRow struct {
	ID               uuid.UUID
	Name             string
	IsVerified       pgtype.Bool
	ShortName        string
	Currency         ProductCurrency
	Type             WebAppType
	ExternalProvider NullExternalProvider
	IsActive         pgtype.Bool
	LastSyncAt       pgtype.Timestamp
	LastSyncStatus   NullExtenalSyncStatus
}

func (q *Queries) GetShop(ctx context.Context, arg GetShopParams) (GetShopRow, error) {
	row := q.db.QueryRow(ctx, getShop, arg.ID, arg.OwnerExternalID)
	var i GetShopRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsVerified,
		&i.ShortName,
		&i.Currency,
		&i.Type,
		&i.ExternalProvider,
		&i.IsActive,
		&i.LastSyncAt,
		&i.LastSyncStatus,
	)
	return i, err
}

const getShops = `-- name: GetShops :many
select id, name, is_verified, short_name, currency, type
from web_apps
where is_deleted = false
  and owner_external_id = $1
`

type GetShopsRow struct {
	ID         uuid.UUID
	Name       string
	IsVerified pgtype.Bool
	ShortName  string
	Currency   ProductCurrency
	Type       WebAppType
}

func (q *Queries) GetShops(ctx context.Context, ownerExternalID pgtype.Int8) ([]GetShopsRow, error) {
	rows, err := q.db.Query(ctx, getShops, ownerExternalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShopsRow
	for rows.Next() {
		var i GetShopsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsVerified,
			&i.ShortName,
			&i.Currency,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShortname = `-- name: GetShortname :one
select short_name
from web_apps
where id = $1::uuid
`

func (q *Queries) GetShortname(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getShortname, id)
	var short_name string
	err := row.Scan(&short_name)
	return short_name, err
}

const isShopOwner = `-- name: IsShopOwner :one
select owner_external_id = $1
from web_apps
where id = $2
`

type IsShopOwnerParams struct {
	OwnerExternalID pgtype.Int8
	ID              uuid.UUID
}

func (q *Queries) IsShopOwner(ctx context.Context, arg IsShopOwnerParams) (bool, error) {
	row := q.db.QueryRow(ctx, isShopOwner, arg.OwnerExternalID, arg.ID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const isShopSyncSupported = `-- name: IsShopSyncSupported :one
select exists(select 1
              from web_apps
              where id = $1
                and type = 'panel'
                and is_deleted = false
                and is_verified = true
                and currency = 'rub'::product_currency)
`

func (q *Queries) IsShopSyncSupported(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, isShopSyncSupported, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const softDeleteShop = `-- name: SoftDeleteShop :exec
update web_apps
set is_deleted= true
where id = $1
`

func (q *Queries) SoftDeleteShop(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteShop, id)
	return err
}

const updateShop = `-- name: UpdateShop :execresult
update web_apps
set name = $1
where id = $2
  and owner_external_id = $3
  and is_deleted = false
returning id
`

type UpdateShopParams struct {
	Name            string
	ID              uuid.UUID
	OwnerExternalID pgtype.Int8
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateShop, arg.Name, arg.ID, arg.OwnerExternalID)
}
