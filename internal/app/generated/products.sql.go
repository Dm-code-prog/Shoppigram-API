// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getMarketplaceWithProducts = `-- name: GetMarketplaceWithProducts :one
SELECT wa.id,
       wa.name,
       wa.short_name,
       wa.is_verified,
       wa.online_payments_enabled,
       wa.currency,
       COALESCE(
                       json_agg(
                       json_build_object(
                               'id', p.id,
                               'name', p.name,
                               'description', p.description,
                               'category', p.category,
                               'price', p.price,
                               'price_currency', p.price_currency::text
                       )
                               ) FILTER (WHERE p.id IS NOT NULL),
                       '[]'::json
       )::json AS products
FROM web_apps wa
         LEFT JOIN products p ON wa.id = p.web_app_id and p.is_deleted = false
WHERE (
    case when $1::uuid != '00000000-0000-0000-0000-000000000000' then wa.id = $1::uuid else true end
    )
  and (
    case when $2::text != '' then wa.short_name = $2::text else true end
    )
  AND wa.is_deleted = false
GROUP BY wa.id, wa.name, wa.short_name, wa.is_verified, wa.online_payments_enabled, wa.currency
`

type GetMarketplaceWithProductsParams struct {
	WebAppID  uuid.UUID
	ShortName string
}

type GetMarketplaceWithProductsRow struct {
	ID                    uuid.UUID
	Name                  string
	ShortName             string
	IsVerified            pgtype.Bool
	OnlinePaymentsEnabled bool
	Currency              ProductCurrency
	Products              []byte
}

func (q *Queries) GetMarketplaceWithProducts(ctx context.Context, arg GetMarketplaceWithProductsParams) (GetMarketplaceWithProductsRow, error) {
	row := q.db.QueryRow(ctx, getMarketplaceWithProducts, arg.WebAppID, arg.ShortName)
	var i GetMarketplaceWithProductsRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ShortName,
		&i.IsVerified,
		&i.OnlinePaymentsEnabled,
		&i.Currency,
		&i.Products,
	)
	return i, err
}
