// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admins.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const countMarketplaceProducts = `-- name: CountMarketplaceProducts :one
select count(*)
from products
where web_app_id = $1::uuid
`

func (q *Queries) CountMarketplaceProducts(ctx context.Context, webAppID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countMarketplaceProducts, webAppID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUserMarketplaces = `-- name: CountUserMarketplaces :one
select count(*)
from web_apps
where owner_external_id = $1
`

func (q *Queries) CountUserMarketplaces(ctx context.Context, ownerExternalID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, countUserMarketplaces, ownerExternalID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMarketplace = `-- name: CreateMarketplace :one
insert into web_apps (name, owner_external_id, short_name)
values ($1,
        $2,
        $3)
returning id
`

type CreateMarketplaceParams struct {
	Name            string
	OwnerExternalID pgtype.Int4
	ShortName       string
}

func (q *Queries) CreateMarketplace(ctx context.Context, arg CreateMarketplaceParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createMarketplace, arg.Name, arg.OwnerExternalID, arg.ShortName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createProduct = `-- name: CreateProduct :one
insert into products (web_app_id, name, description, price, price_currency, category)
values ($4::uuid,
        $1,
        nullif($5::text, ''),
        $2,
        $3,
        nullif($6::varchar(30), ''))
returning id
`

type CreateProductParams struct {
	Name          string
	Price         float64
	PriceCurrency string
	WebAppID      uuid.UUID
	Description   string
	Category      string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.PriceCurrency,
		arg.WebAppID,
		arg.Description,
		arg.Category,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteProduct = `-- name: DeleteProduct :execresult
delete
from products
where web_app_id = $1
  and id = $2
`

type DeleteProductParams struct {
	WebAppID pgtype.UUID
	ID       uuid.UUID
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, deleteProduct, arg.WebAppID, arg.ID)
}

const getMarketplaces = `-- name: GetMarketplaces :many
select id, name, logo_url, is_verified
from web_apps
where owner_external_id = $1
`

type GetMarketplacesRow struct {
	ID         uuid.UUID
	Name       string
	LogoUrl    pgtype.Text
	IsVerified pgtype.Bool
}

func (q *Queries) GetMarketplaces(ctx context.Context, ownerExternalID pgtype.Int4) ([]GetMarketplacesRow, error) {
	rows, err := q.db.Query(ctx, getMarketplaces, ownerExternalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMarketplacesRow
	for rows.Next() {
		var i GetMarketplacesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoUrl,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserTheOwnerOfWebApp = `-- name: IsUserTheOwnerOfWebApp :one
select owner_external_id = $1
from web_apps
`

func (q *Queries) IsUserTheOwnerOfWebApp(ctx context.Context, ownerExternalID pgtype.Int4) (bool, error) {
	row := q.db.QueryRow(ctx, isUserTheOwnerOfWebApp, ownerExternalID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const updateMarketplace = `-- name: UpdateMarketplace :execresult
update web_apps
set name = $1
where id = $2
  and owner_external_id = $3
`

type UpdateMarketplaceParams struct {
	Name            string
	ID              uuid.UUID
	OwnerExternalID pgtype.Int4
}

func (q *Queries) UpdateMarketplace(ctx context.Context, arg UpdateMarketplaceParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateMarketplace, arg.Name, arg.ID, arg.OwnerExternalID)
}

const updateProduct = `-- name: UpdateProduct :execresult
update products
set name           = $1,
    description    = nullif($6::text, ''),
    price          = $2,
    price_currency = $3,
    category       = nullif($7::varchar(30), '')
where web_app_id = $4
  and id = $5
`

type UpdateProductParams struct {
	Name          string
	Price         float64
	PriceCurrency string
	WebAppID      pgtype.UUID
	ID            uuid.UUID
	Description   string
	Category      string
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.PriceCurrency,
		arg.WebAppID,
		arg.ID,
		arg.Description,
		arg.Category,
	)
}
