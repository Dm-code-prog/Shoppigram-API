// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admins.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const countUserMarketplaces = `-- name: CountUserMarketplaces :one
select count(*)
from web_apps
where owner_external_id = $1
`

func (q *Queries) CountUserMarketplaces(ctx context.Context, ownerExternalID pgtype.Int4) (int64, error) {
	row := q.db.QueryRow(ctx, countUserMarketplaces, ownerExternalID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMarketplace = `-- name: CreateMarketplace :one
insert into web_apps (name, owner_external_id, short_name)
values ($1,
        $2,
        $3)
returning id
`

type CreateMarketplaceParams struct {
	Name            string
	OwnerExternalID pgtype.Int4
	ShortName       string
}

func (q *Queries) CreateMarketplace(ctx context.Context, arg CreateMarketplaceParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createMarketplace, arg.Name, arg.OwnerExternalID, arg.ShortName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getMarketplaces = `-- name: GetMarketplaces :many
select id, name, logo_url, is_verified
from web_apps
where owner_external_id = $1
`

type GetMarketplacesRow struct {
	ID         uuid.UUID
	Name       string
	LogoUrl    pgtype.Text
	IsVerified pgtype.Bool
}

func (q *Queries) GetMarketplaces(ctx context.Context, ownerExternalID pgtype.Int4) ([]GetMarketplacesRow, error) {
	rows, err := q.db.Query(ctx, getMarketplaces, ownerExternalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMarketplacesRow
	for rows.Next() {
		var i GetMarketplacesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LogoUrl,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMarketplace = `-- name: UpdateMarketplace :execresult
update web_apps
set name = $1
where id = $2
  and owner_external_id = $3
`

type UpdateMarketplaceParams struct {
	Name            string
	ID              uuid.UUID
	OwnerExternalID pgtype.Int4
}

func (q *Queries) UpdateMarketplace(ctx context.Context, arg UpdateMarketplaceParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, updateMarketplace, arg.Name, arg.ID, arg.OwnerExternalID)
}
