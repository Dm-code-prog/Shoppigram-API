// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: products.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProducts = `-- name: GetProducts :many
select p.id,
       p.name,
       p.description,
       p.category,
       p.price,
       p.price_currency::text     as price_currency,
       wa.id                      as web_app_id,
       wa.name                    as web_app_name,
       wa.short_name              as web_app_short_name,
       wa.is_verified             as web_app_is_verified,
       wa.online_payments_enabled as online_payments_enabled
from web_apps wa
         join products p on wa.id = p.web_app_id
where wa.id = $1
  and wa.is_deleted = false
`

type GetProductsRow struct {
	ID                    uuid.UUID
	Name                  string
	Description           pgtype.Text
	Category              pgtype.Text
	Price                 float64
	PriceCurrency         string
	WebAppID              uuid.UUID
	WebAppName            string
	WebAppShortName       string
	WebAppIsVerified      pgtype.Bool
	OnlinePaymentsEnabled bool
}

func (q *Queries) GetProducts(ctx context.Context, id uuid.UUID) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.PriceCurrency,
			&i.WebAppID,
			&i.WebAppName,
			&i.WebAppShortName,
			&i.WebAppIsVerified,
			&i.OnlinePaymentsEnabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
