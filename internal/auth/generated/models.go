// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package generated

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ExternalProvider string

const (
	ExternalProviderWildberries ExternalProvider = "wildberries"
)

func (e *ExternalProvider) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ExternalProvider(s)
	case string:
		*e = ExternalProvider(s)
	default:
		return fmt.Errorf("unsupported scan type for ExternalProvider: %T", src)
	}
	return nil
}

type NullExternalProvider struct {
	ExternalProvider ExternalProvider
	Valid            bool // Valid is true if ExternalProvider is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullExternalProvider) Scan(value interface{}) error {
	if value == nil {
		ns.ExternalProvider, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ExternalProvider.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullExternalProvider) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ExternalProvider), nil
}

type OrderState string

const (
	OrderStateCreated   OrderState = "created"
	OrderStateConfirmed OrderState = "confirmed"
	OrderStateDone      OrderState = "done"
	OrderStateRejected  OrderState = "rejected"
)

func (e *OrderState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderState(s)
	case string:
		*e = OrderState(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderState: %T", src)
	}
	return nil
}

type NullOrderState struct {
	OrderState OrderState
	Valid      bool // Valid is true if OrderState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderState) Scan(value interface{}) error {
	if value == nil {
		ns.OrderState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderState), nil
}

type OrderType string

const (
	OrderTypeP2p    OrderType = "p2p"
	OrderTypeOnline OrderType = "online"
)

func (e *OrderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderType(s)
	case string:
		*e = OrderType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderType: %T", src)
	}
	return nil
}

type NullOrderType struct {
	OrderType OrderType
	Valid     bool // Valid is true if OrderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderType), nil
}

type ProductCurrency string

const (
	ProductCurrencyRub ProductCurrency = "rub"
	ProductCurrencyUsd ProductCurrency = "usd"
	ProductCurrencyEur ProductCurrency = "eur"
)

func (e *ProductCurrency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductCurrency(s)
	case string:
		*e = ProductCurrency(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductCurrency: %T", src)
	}
	return nil
}

type NullProductCurrency struct {
	ProductCurrency ProductCurrency
	Valid           bool // Valid is true if ProductCurrency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductCurrency) Scan(value interface{}) error {
	if value == nil {
		ns.ProductCurrency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductCurrency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductCurrency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductCurrency), nil
}

type WebAppType string

const (
	WebAppTypeShop  WebAppType = "shop"
	WebAppTypePanel WebAppType = "panel"
)

func (e *WebAppType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WebAppType(s)
	case string:
		*e = WebAppType(s)
	default:
		return fmt.Errorf("unsupported scan type for WebAppType: %T", src)
	}
	return nil
}

type NullWebAppType struct {
	WebAppType WebAppType
	Valid      bool // Valid is true if WebAppType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWebAppType) Scan(value interface{}) error {
	if value == nil {
		ns.WebAppType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WebAppType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWebAppType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.WebAppType), nil
}

type Cursor struct {
	Name            string
	CursorTimestamp pgtype.Timestamp
	CursorID        pgtype.UUID
}

type Order struct {
	ID             uuid.UUID
	ReadableID     pgtype.Int8
	WebAppID       pgtype.UUID
	ExternalUserID pgtype.Int8
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	Type           OrderType
	State          OrderState
}

type OrderProduct struct {
	OrderID   pgtype.UUID
	ProductID pgtype.UUID
	Quantity  int32
}

type Product struct {
	ID               uuid.UUID
	WebAppID         pgtype.UUID
	Name             string
	Description      pgtype.Text
	Price            float64
	Category         pgtype.Text
	IsDeleted        bool
	ExternalProvider NullExternalProvider
	ExternalID       pgtype.Text
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
}

type ProductExternalLink struct {
	ID        uuid.UUID
	ProductID uuid.UUID
	Url       string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Label     string
}

type ShopExternalConnection struct {
	ID               uuid.UUID
	CreatedAt        pgtype.Timestamp
	UpdatedAt        pgtype.Timestamp
	WebAppID         uuid.UUID
	IsActive         bool
	ExternalProvider ExternalProvider
	ApiKey           string
}

type TelegramChannel struct {
	ID              uuid.UUID
	ExternalID      int64
	Title           string
	Name            pgtype.Text
	IsPublic        bool
	OwnerExternalID int64
}

type TelegramUser struct {
	ID           uuid.UUID
	ExternalID   int64
	IsBot        pgtype.Bool
	FirstName    string
	LastName     pgtype.Text
	Username     pgtype.Text
	LanguageCode pgtype.Text
	IsPremium    pgtype.Bool
	AllowsPm     pgtype.Bool
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

type WebApp struct {
	ID                    uuid.UUID
	Name                  string
	OwnerExternalID       pgtype.Int8
	LogoUrl               pgtype.Text
	IsVerified            pgtype.Bool
	ShortName             string
	VerifiedAt            pgtype.Timestamp
	CreatedAt             pgtype.Timestamp
	IsDeleted             pgtype.Bool
	OnlinePaymentsEnabled bool
	Currency              ProductCurrency
	CommissionPercent     pgtype.Numeric
	CommissionFixed       pgtype.Numeric
	Type                  WebAppType
}
