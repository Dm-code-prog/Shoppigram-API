// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getExternalIds = `-- name: GetExternalIds :many
select external_id
from products
where web_app_id = $1
  and external_provider = $2
  and is_deleted = false
`

type GetExternalIdsParams struct {
	WebAppID         pgtype.UUID
	ExternalProvider NullExternalProvider
}

func (q *Queries) GetExternalIds(ctx context.Context, arg GetExternalIdsParams) ([]pgtype.Text, error) {
	rows, err := q.db.Query(ctx, getExternalIds, arg.WebAppID, arg.ExternalProvider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Text
	for rows.Next() {
		var external_id pgtype.Text
		if err := rows.Scan(&external_id); err != nil {
			return nil, err
		}
		items = append(items, external_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductIDs = `-- name: GetProductIDs :many
select p.id,
       p.external_id
from products p
where p.web_app_id = $1
  and p.external_provider = $2
  and p.is_deleted = false
`

type GetProductIDsParams struct {
	WebAppID         pgtype.UUID
	ExternalProvider NullExternalProvider
}

type GetProductIDsRow struct {
	ID         uuid.UUID
	ExternalID pgtype.Text
}

func (q *Queries) GetProductIDs(ctx context.Context, arg GetProductIDsParams) ([]GetProductIDsRow, error) {
	rows, err := q.db.Query(ctx, getProductIDs, arg.WebAppID, arg.ExternalProvider)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductIDsRow
	for rows.Next() {
		var i GetProductIDsRow
		if err := rows.Scan(&i.ID, &i.ExternalID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
