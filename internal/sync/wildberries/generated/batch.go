// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package generated

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createOrUpdateProducts = `-- name: CreateOrUpdateProducts :batchexec
insert into products (web_app_id, name, description, price, category, external_provider, external_id)
values ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
on conflict (external_id, external_provider) do update
    set name        = excluded.name,
        description = excluded.description,
        price       = excluded.price,
        category    = excluded.category
`

type CreateOrUpdateProductsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateOrUpdateProductsParams struct {
	WebAppID         pgtype.UUID
	Name             string
	Description      pgtype.Text
	Price            float64
	Category         pgtype.Text
	ExternalProvider NullExternalProvider
	ExternalID       pgtype.Text
}

func (q *Queries) CreateOrUpdateProducts(ctx context.Context, arg []CreateOrUpdateProductsParams) *CreateOrUpdateProductsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.WebAppID,
			a.Name,
			a.Description,
			a.Price,
			a.Category,
			a.ExternalProvider,
			a.ExternalID,
		}
		batch.Queue(createOrUpdateProducts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateOrUpdateProductsBatchResults{br, len(arg), false}
}

func (b *CreateOrUpdateProductsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateOrUpdateProductsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const markProductAsDeleted = `-- name: MarkProductAsDeleted :batchexec
update products
set is_deleted = true
where external_id in ($1)
`

type MarkProductAsDeletedBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

func (q *Queries) MarkProductAsDeleted(ctx context.Context, externalID []pgtype.Text) *MarkProductAsDeletedBatchResults {
	batch := &pgx.Batch{}
	for _, a := range externalID {
		vals := []interface{}{
			a,
		}
		batch.Queue(markProductAsDeleted, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &MarkProductAsDeletedBatchResults{br, len(externalID), false}
}

func (b *MarkProductAsDeletedBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *MarkProductAsDeletedBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
