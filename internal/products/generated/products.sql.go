// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getProducts = `-- name: GetProducts :many
select w.name as web_app_name,
       p.id,
       p.name,
       p.description,
       p.price,
       p.price_currency,
       p.image_url
from products p
         join web_apps w on p.web_app_id = w.id
where w.id = $1
`

type GetProductsRow struct {
	WebAppName    string
	ID            uuid.UUID
	Name          string
	Description   pgtype.Text
	Price         float64
	PriceCurrency string
	ImageUrl      string
}

func (q *Queries) GetProducts(ctx context.Context, id uuid.UUID) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.WebAppName,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.PriceCurrency,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
